# Generated by Django 5.0.1 on 2024-11-16 12:23

import django.contrib.auth.models
import django.contrib.auth.validators
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Record',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('transaction_type', models.CharField(choices=[('income', 'Income'), ('expense', 'Expense'), ('advance', 'Advance')], max_length=20)),
                ('item_name', models.CharField(max_length=100)),
                ('item_type', models.CharField(choices=[('it_equipment', 'IT Equipment'), ('furniture', 'Furniture'), ('vehicle', 'Vehicle'), ('stationary', 'Stationary'), ('appliances', 'Appliances'), ('electronics', 'Electronics'), ('consumables', 'Consumables'), ('office_decor', 'Office DÃ©cor'), ('cleaning_supplies', 'Cleaning Supplies'), ('safety_equipment', 'Safety Equipment'), ('documents_files', 'Documents and Files'), ('tools', 'Tools')], max_length=20)),
                ('description', models.TextField()),
                ('project', models.CharField(choices=[('drc', 'DRC'), ('nca', 'NCA'), ('giz', 'GIZ'), ('mc', 'MC'), ('aware', 'AWARE')], max_length=20)),
                ('location', models.CharField(choices=[('badakhshan', 'Badakhshan'), ('badghis', 'Badghis'), ('baghlan', 'Baghlan'), ('balkh', 'Balkh'), ('bamyan', 'Bamyan'), ('daykundi', 'Daykundi'), ('farah', 'Farah'), ('faryab', 'Faryab'), ('ghazni', 'Ghazni'), ('ghor', 'Ghor'), ('helmand', 'Helmand'), ('herat', 'Herat'), ('jawzjan', 'Jawzjan'), ('kabul', 'Kabul'), ('kandahar', 'Kandahar'), ('kapisa', 'Kapisa'), ('khost', 'Khost'), ('kunar', 'Kunar'), ('kunduz', 'Kunduz'), ('laghman', 'Laghman'), ('logar', 'Logar'), ('nangarhar', 'Nangarhar'), ('nimroz', 'Nimroz'), ('nuristan', 'Nuristan'), ('paktia', 'Paktia'), ('paktika', 'Paktika'), ('panjshir', 'Panjshir'), ('parwan', 'Parwan'), ('samangan', 'Samangan'), ('sar_e_pul', 'Sar-e-Pul'), ('takhar', 'Takhar'), ('urozgan', 'Urozgan'), ('wardak', 'Wardak (Maidan Wardak)'), ('zabul', 'Zabul')], max_length=20)),
                ('requester', models.CharField(max_length=100)),
                ('unit_measure', models.CharField(choices=[('pc', 'PC'), ('box', 'BOX'), ('pk', 'PK'), ('kg', 'KG'), ('lb', 'LB'), ('l', 'L'), ('ml', 'ML'), ('m', 'M'), ('cm', 'CM'), ('in', 'IN'), ('ft', 'FT'), ('dozen', 'DOZEN'), ('set', 'SET'), ('pair', 'PAIR'), ('roll', 'ROLL'), ('bundle', 'BUNDLE'), ('carton', 'CARTON'), ('case', 'CASE'), ('gb', 'GB'), ('tb', 'TB'), ('ea', 'EA'), ('sheet', 'SHEET'), ('bag', 'BAG'), ('tube', 'TUBE'), ('can', 'CAN'), ('drum', 'DRUM'), ('pallet', 'PALLET'), ('unit', 'UNIT'), ('lot', 'LOT')], max_length=20)),
                ('quantity', models.PositiveIntegerField()),
                ('unit_price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('total_value', models.DecimalField(decimal_places=2, editable=False, max_digits=10)),
                ('date', models.DateField(default=django.utils.timezone.now)),
                ('reviewer', models.CharField(choices=[('committee', 'Committee'), ('deputy_director', 'Deputy Director'), ('executive_director', 'Executive Director'), ('chief_executive_director', 'Chief Executive Director')], max_length=50)),
                ('reviewer_result', models.CharField(max_length=100)),
                ('approval', models.CharField(choices=[('approved', 'Approved'), ('declined', 'Declined'), ('pending', 'Pending'), ('postponed', 'Postponed')], max_length=20)),
                ('cashier_status', models.CharField(max_length=100)),
                ('comments', models.TextField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_type', models.CharField(choices=[('superadmin', 'Super Admin'), ('data_entry', 'Data Entry User'), ('deputy_director', 'Deputy Director'), ('executive_director', 'Executive Director'), ('chief_executive', 'Chief Executive Director')], max_length=20)),
                ('department', models.CharField(max_length=100)),
                ('phone', models.CharField(max_length=20)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to.', related_name='custom_user_set', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='custom_user_permissions_set', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
